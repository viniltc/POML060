#ifndef STIM_GUI_PROTOCOL_H
#define STIM_GUI_PROTOCOL_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "system_config.h"
#include "system_definitions.h"

#define START_OF_MESSAGE_BYTE (0x7b)
#define END_OF_MESSAGE_BYTE (0x7d)
#define ESCAPE_BYTE (0x7e)
#define XOR_BYTE (0x20) /* This is used to stop any reserved bytes in the data appearing in the output byte stream. */

#define STIM_GUI_PROTOCOL_S_BLOCK_HEADER_SIZE (3)
#define STIM_GUI_PROTOCOL_L_BLOCK_HEADER_SIZE (6)

typedef enum {GUI_ADDRESS=0, STIMULATOR_ADDRESS1=1} STIM_GUI_ADDRESS_T;

typedef enum {WRITE_RESPONSE=0, WRITE_COMMAND=1, READ_RESPONSE=2, READ_COMMAND=3} STIM_GUI_MSG_TYPE_T;

typedef enum {TOPIC_STIMULATOR=0, TOPIC_SUB_ACTIVITY=1, TOPIC_CHANNEL=2, TOPIC_SENSOR=3} STIM_GUI_TOPIC_T;

typedef struct STIM_GUI_MESSAGE_S_BLOCK *STIM_GUI_MESSAGE_S_BLOCK_PTR;

typedef enum {
    STIM_REG_ECHO=0,
    STIM_REG_STIMULATOR_TYPE=1,
    STIM_REG_HARDWARE_VERSION=2,
    STIM_REG_FIRMWARE_VERSION=3,
    STIM_REG_LAST_HARDWARE_ERROR_CODE=4,
    STIM_REG_LAST_COMMAND_ERROR_CODE=5,
    STIM_REG_STATUS=6,
    STIM_REG_EXTENDED_STATUS=7,
    STIM_REG_UNIQUE_UNIT_ID=8,
    STIM_REG_TIME_SECONDS=12,
    STIM_REG_TIME_MICROSECONDS=16,
    STIM_REG_POWER_CYCLE_COUNT=20,
    STIM_REG_HOURS_OF_USE=22,
    STIM_REG_SUPPLY_VOLTAGE=24,
    STIM_REG_BATTERY_VOLTAGE=25,
    STIM_REG_BATTERY_CAPACITY_REMAINING=26,
    STIM_REG_BATTERY_MINUTES_REMAINING=27,
    STIM_REG_GENERAL_OPTIONS=28,
    STIM_REG_POWER_MODE=29,
    STIM_REG_TEMPERATURE=30,
    STIM_REG_COMMAND=31,
    STIM_REG_NUM_STIMULATORS=32,
    STIM_REG_NUM_CHANNELS=33,
    STIM_REG_NUM_FOOTSWITCH_SOCKETS=34,
    STIM_REG_NUM_SMART_SENSORS=35,
    STIM_REG_SD_CARD_ERROR_CODE=36,
    STIM_REG_STIM_RAIL_VOLTAGE=37,
    STIM_REG_SENSOR_CONFIGURATION_ID=38,
    STIM_REG_USER_SELECTED=40,
    STIM_REG_ACTIVITY_SELECTED=41,
    STIM_REG_ACTIVITY_OPTIONS=42,
    STIM_REG_ACTIVITY_STATUS=43,
    STIM_REG_ACTIVITY_TIME_RUNNING_MS=44,
    STIM_REG_ACTIVITY_MINUTES_REMAINING=48,
    STIM_REG_USER_CONTROL_LOCK=49,
    STIM_REG_USER_CONTROL_OPTIONS=50,
    STIM_REG_USER_CONTROL_KNOB_INCREMENT=51,
    STIM_REG_USER_CONTROL_CH1=52,
    STIM_REG_USER_CONTROL_CH2=53,
    STIM_REG_USER_CONTROL_CH3=54,
    STIM_REG_USER_CONTROL_CH4=55,
    STIM_REG_USER_CONTROL_CH5=56,
    STIM_REG_USER_REMOTE_BUTTON_PRESS=57,
    STIM_REG_CHANNEL_SELECT_LEDS=58,
    STIM_REG_STIMULATOR_BUTTON_PRESS=59,
    STIM_REG_BEEP_REPETITON_PERIOD_100MS=60,
    STIM_REG_BEEP_ON_TIME_10MS=61,
    STIM_REG_BEEP_FREQUENCY_10HZ=62,
    STIM_REG_BEEP_COUNTS=63,
    STIM_REG_FOOTSWITCH1_CONNECTED=64,
    STIM_REG_FOOTSWITCH1_MODE=65,
    STIM_REG_FOOTSWITCH1_VALUE=66,
    STIM_REG_FOOTSWITCH1_UPDATE_RATE=67,
    STIM_REG_FOOTSWITCH2_CONNECTED=68,
    STIM_REG_FOOTSWITCH2_MODE=69,
    STIM_REG_FOOTSWITCH2_VALUE=70,
    STIM_REG_FOOTSWITCH2_UPDATE_RATE=71,
    STIM_REG_UNUSED_ADDRESS=72,
} STIM_REG_ID_T;

#define STIMULATOR_STATUS_STIM_FAILURE      (1<<0)
#define STIMULATOR_STATUS_COMMAND_ERROR     (1<<1)
#define STIMULATOR_STATUS_SD_CARD_MISSING   (1<<2)
#define STIMULATOR_STATUS_SD_CARD_ERROR     (1<<3)
#define STIMULATOR_STATUS_CONFIG_ERROR      (1<<4)
#define STIMULATOR_STATUS_CONFIG_FAILED     (1<<5)

#define ACTIVITY_OPTIONS_NORMAL_STIMULATION     (1)
#define ACTIVITY_OPTIONS_AUTOMATIC_TRANSITIONS  (2)
#define ACTIVITY_OPTIONS_USE_EXERCISE_TIMING    (4)
#define ACTIVITY_OPTIONS_ENABLE_LOGGING         (8)

typedef enum {
    BUTTON_INCREASE=1,
    BUTTON_DECREASE=2,
    BUTTON_MOVE_PHASE=3,
    BUTTON_START_STOP=4,
} REMOTE_BUTTON_T;

typedef enum {
  STIM_SUB_ACT_REG_CURRENT_PHASE=0,
  STIM_SUB_ACT_REG_CONDITION_SATISFIED=1,
  STIM_SUB_ACT_REG_CURRENT_ITERATION=2,
  STIM_SUB_ACT_REG_DURATION_OF_CURRENT_PHASE_MS=4,
  STIM_SUB_ACT_REG_ROLE_UUID_BASE = 16,
  STIM_SUB_ACT_REG_ROLE_CHANGE_BASE = 116,
} STIM_SUB_ACT_REG_ID_T;

typedef struct STIM_GUI_MESSAGE_S_BLOCK {
    STIM_GUI_MSG_TYPE_T msg_type;
    STIM_GUI_TOPIC_T topic;
    uint8_t index;
    uint8_t reg_address;
    uint8_t data_length;
    uint8_t *data;
    STIM_GUI_MESSAGE_S_BLOCK_PTR next;
} STIM_GUI_MESSAGE_S_BLOCK_T;

typedef enum {
    STIM_LONG_REG_ERROR_CODE=0,
    STIM_LONG_REG_NOTIFICATION_TEXT=1,
    STIM_LONG_REG_STIM_CONFIG_FILE=2,
    STIM_LONG_REG_GUI_CONFIG_FILE=3,
    STIM_LONG_REG_STIM_LOCAL_INFO=4,
    STIM_LONG_REG_SESSION_NAME=5,
    STIM_LONG_REG_SESSION_NOTE=6,
    STIM_LONG_REG_ACTIVITY_NOTE=7,
    STIM_LONG_REG_TASK_SETUP_NOTE=8,
    STIM_LONG_REG_ITERATION_NOTE=9,
    STIM_LONG_REG_ETRX_COMMS=10,
    STIM_LONG_REG_MAINTENANCE_LOG=11,
    STIM_LONG_REG_NV_STIM_CONFIG_FILE=12,
} STIM_LONG_REG_ID_T;

typedef struct STIM_GUI_MESSAGE_L_BLOCK {
    STIM_GUI_MSG_TYPE_T msg_type;
    uint8_t reg_address;
    uint32_t data_length;
    uint8_t *data;
} STIM_GUI_MESSAGE_L_BLOCK_T;

typedef enum {
    STIM_POWER_MODE_NORMAL=0,
    STIM_POWER_MODE_STANDBY=1,
    STIM_POWER_MODE_OFF=2,
} STIM_GUI_POWER_MODE_T;

typedef enum {
    STIM_COMMAND_RESET=0,
    STIM_COMMAND_GOTO_BOOTLOADER=1,
    STIM_COMMAND_POWER_OFF=2,
    STIM_COMMAND_SLEEP=3,
    STIM_COMMAND_REPORT_ATTACHED_SENSORS=4,
    STIM_COMMAND_PERFORM_SELF_TEST=5,
    STIM_COMMAND_CLEAR_SENSOR_ASSIGNMENT=6,
    STIM_COMMAND_CLEAR_STIM_CONFIG=7,
    STIM_COMMAND_ERASE_SENSOR_ASSIGNMENT=8,
    STIM_COMMAND_ERASE_STIM_CONFIG=9,
    STIM_COMMAND_SAVE_SENSOR_ASSIGNMENT=10,
} STIM_GUI_STIMULATOR_COMMAND_T;

// Bit mask of stimulator options
typedef enum {
    STIM_GENERAL_OPTION_SUPPRESS_NO_GUI_MESSAGE=1,
} STIM_GENERAL_OPTIONS_T;

typedef enum
{
    REMOTE_BUTTON_INCREASE=1,
    REMOTE_BUTTON_DECREASE=2,
    REMOTE_BUTTON_MOVE=3,
    REMOTE_BUTTON_START=4,
    REMOTE_BUTTON_STOP=5,
} REMOTE_BUTTON_ID_T;

typedef enum
{
    MENU_BUTTON_UP=0,
    MENU_BUTTON_DOWN,
    MENU_BUTTON_LEFT,
    MENU_BUTTON_RIGHT,
    MENU_BUTTON_SELECT,
    MENU_BUTTON_TEST1,
    MENU_BUTTON_TEST2,
    MENU_BUTTON_TEST3,
    MENU_BUTTON_TEST4,
    MENU_BUTTON_TEST5,
    MENU_BUTTON_SPARE1,
    MENU_BUTTON_SPARE2,
    MENU_BUTTON_FUNCTION,
    MENU_BUTTON_HELP,
    MENU_BUTTON_CUE,
    MENU_BUTTON_PAUSE,
    MENU_BUTTON_POWER,
    NUM_MENU_BUTTONS
} MENU_BUTTON_ID_T;

/**
 * Initialise the STIM-GUI protocol
 */
void STIM_GUI_PROTOCOL_Initialise(void);

/**
 * Send a message using the Stim-GUI protocol.
 * @param destination_device
 * @param source_device
 * @param blocks One or more linked short register blocks 
 * @return True if message was sent
 */
bool STIM_GUI_Send_message(const uint8_t destination_device, const uint8_t source_device, STIM_GUI_MESSAGE_S_BLOCK_T *block);

// Used for addressing stimulators
extern uint8_t STIM_GUI_PROTOCOL_ThisStimulatorID;

typedef struct {
    double quaternion[4];
    int16_t euler213_degrees[3];
    int16_t euler123_degrees[3];
    double acceleration_g[3];
    double gyroscope_dps[3];
} SENSOR_DATA_T;

#ifdef __cplusplus
}
#endif


#endif
